<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.0.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
 
    <context:component-scan base-package="com.xd.cloud.service.core,com.xd.cloud.service.cms,com.xd.cloud.service.hd,com.xd.cloud.service.course"/>
    <context:component-scan base-package="com.xd.cloud.dao.core,com.xd.cloud.dao.cms,com.xd.cloud.dao.hd,com.xd.cloud.dao.course"/>
    <context:component-scan base-package="com.xd.cloud.entity.core,com.xd.cloud.entity.cms,com.xd.cloud.entity.hd,com.xd.cloud.entity.course"/>
    <context:annotation-config/>
 	
    <!-- 读取mysql jdbc的配置-->
    <context:property-placeholder location="classpath:*.properties" />
    <!-- 配置数据源，从上面配置文件读取-->
    <bean id="dataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${database.driverClassName}"/>
        <property name="jdbcUrl" value="${database.url}"/>
        <property name="user" value="${database.username}"/>
        <property name="password" value="${database.password}"/>
        <property name="initialPoolSize" value="${pool.initialPoolSize}"/>
        <property name="minPoolSize" value="${pool.minPoolSize}"/>
        <property name="maxPoolSize" value="${pool.maxPoolSize}"/>
        <property name="maxIdleTime" value="${pool.maxIdleTime}"/>
        <property name="acquireIncrement" value="${pool.acquireIncrement}"/>
    </bean>
 
    <!-- 配置session factory，hibernate4 直接改为localsession，也是从上面的配置文件读取-->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="com.xd.cloud.entity" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.hibernate.connection.SetBigStringTryClob">${hibernate.hibernate.connection.SetBigStringTryClob}</prop>
                <prop key="hibernate.hibernate.archive.autodetection">${hibernate.hibernate.archive.autodetection}</prop>
                <prop key="hibernate.hibernate.connection.charSet">${hibernate.hibernate.connection.charSet}</prop>
                <prop key="hibernate.hibernate.cache.use_query_cache">${hibernate.hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.hibernate.cache.use_second_level_cache">${hibernate.hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.hibernate.ejb.naming_strategy">${hibernate.hibernate.ejb.naming_strategy}</prop>
            </props>
        </property>
    </bean>
 
 
 
    <!-- 配置事务管理器 -->
    <bean id="txManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
 
    <!-- 配置事务异常封装-->
    <bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
 
    <!-- 声明式容器事务管理-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="put*" propagation="REQUIRED" />
            <tx:method name="use*" propagation="REQUIRED"/>
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.xd.cloud.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

 	 <!-- 	Memcached 配置-->
	<bean id="memCachedClient" class="com.danga.MemCached.MemCachedClient">
		<constructor-arg>
			<value>sockIOPool</value>
		</constructor-arg>
	</bean>
	<bean id="sockIOPool" class="com.danga.MemCached.SockIOPool" factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
		<constructor-arg>
			<value>sockIOPool</value>
		</constructor-arg>
		<property name="servers">
			<list>
				<value>${memcache.server}</value>
			</list>
		</property>
		<property name="weights">
			<list>
				<value>1</value>
			</list>
		</property>
	</bean>
	
	<bean id="cacheInterceptor" class="com.xd.cloud.common.cache.CacheManager">
		<property name="expiry" value="360000"/>
	</bean>
	
    <bean id="securityManager"
        class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="shiroDbRealm" />
    </bean>
    
    <!-- 項目自定义的Realm -->
    <bean id="shiroDbRealm" class="com.xd.cloud.shiro.UserRealm" ></bean>
    
    <!-- Shiro Filter -->
    <bean id="shiroFilter"
        class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/course/tologin" />
        <property name="successUrl" value="/course/home" />
        <property name="unauthorizedUrl" value="/error" />
        <property name="filterChainDefinitions">
            <value>
            /validateCode = anon
            /assets/stylesheets/** = anon
            /assets/stylesheets/bootstrap/** = anon
            /assets/images/** = anon
            /assets/fonts/** = anon
            /assets/javascripts/jquery/** = anon
            /assets/javascripts/bootstrap/** = anon
            /assets/javascripts/plugins/validate/** = anon
            /assets/javascripts/ie/** = anon
            /assets/javascripts/** = anon
            /assets/ueditor/** = anon
            /assets/ueditor/jsp/** = anon
            /assets/ueditor/themes/** = anon
            /assets/ueditor/third-party/** = anon
            /assets/ueditor/lang/zh-cn/** = anon
            /assets/ueditor/lang/zh-cn/** = anon
            /style/** = anon
            /style/css/** = anon
            /style/js/** = anon
            /style/img/** = anon
            /style/echart/** = anon
            /style/echart/chart/** = anon
            /style/echart/theme/** = anon
            /upload/** = anon
            
            / = anon
            /admin = anon
            /admin/tologin = anon
            /hd = anon
            /hd/login = anon
            /hd/tologin = anon
            /hd/index/** = anon
            /hd/** = anon
            /wx/** = anon
            
            /tool/** = anon
            
            /admin/** = authc,roles[admin]
            /hdadmin/** = authc
            /courseadmin/** = authc
            
            /course = anon
            /course/** = anon
                        
            /user/** = authc
            
            /** = authc
            </value>
        </property>
    </bean>
</beans>